# Script PowerShell pour tester les endpoints d'images de visites
# Utilisez ce script pour diagnostiquer rapidement les probl√®mes

Write-Host "üîç Test des Endpoints d'Images de Visites" -ForegroundColor Cyan
Write-Host "=========================================" -ForegroundColor Cyan

# Configuration
$baseUrl = "http://localhost:8080"
$visitId = 1  # Changez selon votre visite de test

Write-Host "`nüìã Configuration:" -ForegroundColor Yellow
Write-Host "   Base URL: $baseUrl" -ForegroundColor White
Write-Host "   Visit ID: $visitId" -ForegroundColor White

# Test 1: V√©rifier que le backend est accessible
Write-Host "`nüß™ Test 1: Backend Accessible" -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$baseUrl/api/visits" -Method GET -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Host "   ‚úÖ Backend accessible (Status: $($response.StatusCode))" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è Backend r√©pond mais avec un code inattendu: $($response.StatusCode)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "   ‚ùå Backend non accessible: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   üí° V√©rifiez que le backend Spring Boot est d√©marr√© sur le port 8080" -ForegroundColor Cyan
    exit 1
}

# Test 2: V√©rifier les visites disponibles
Write-Host "`nüß™ Test 2: Visites Disponibles" -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$baseUrl/api/visits" -Method GET -TimeoutSec 10
    $visits = $response.Content | ConvertFrom-Json
    Write-Host "   ‚úÖ $($visits.Count) visite(s) trouv√©e(s)" -ForegroundColor Green
    
    if ($visits.Count -gt 0) {
        Write-Host "   üìã Premi√®res visites:" -ForegroundColor Cyan
        $visits | Select-Object -First 3 | ForEach-Object {
            Write-Host "      - Visite ID: $($_.id), Statut: $($_.planning.statut)" -ForegroundColor White
        }
        
        # Utiliser le premier ID disponible si la visite sp√©cifi√©e n'existe pas
        $availableVisit = $visits | Where-Object { $_.id -eq $visitId } | Select-Object -First 1
        if (-not $availableVisit) {
            $visitId = $visits[0].id
            Write-Host "   üîÑ Utilisation de la visite ID: $visitId" -ForegroundColor Yellow
        }
    } else {
        Write-Host "   ‚ö†Ô∏è Aucune visite trouv√©e" -ForegroundColor Yellow
    }
} catch {
    Write-Host "   ‚ùå Erreur lors de la r√©cup√©ration des visites: $($_.Exception.Message)" -ForegroundColor Red
}

# Test 3: V√©rifier les images d'une visite
Write-Host "`nüß™ Test 3: Images de la Visite $visitId" -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$baseUrl/api/visits/$visitId/images" -Method GET -TimeoutSec 10
    $images = $response.Content | ConvertFrom-Json
    Write-Host "   ‚úÖ $($images.Count) image(s) trouv√©e(s) pour la visite $visitId" -ForegroundColor Green
    
    if ($images.Count -gt 0) {
        Write-Host "   üì∏ D√©tails des images:" -ForegroundColor Cyan
        $images | ForEach-Object {
            Write-Host "      - Image ID: $($_.id), Fichier: $($_.originalFileName)" -ForegroundColor White
            Write-Host "        Taille: $($_.fileSize) bytes, Type: $($_.mimeType)" -ForegroundColor Gray
        }
    } else {
        Write-Host "   ‚ö†Ô∏è Aucune image trouv√©e pour cette visite" -ForegroundColor Yellow
        Write-Host "   üí° C'est normal si la visite n'a pas d'images" -ForegroundColor Cyan
    }
} catch {
    if ($_.Exception.Response.StatusCode -eq 404) {
        Write-Host "   ‚ö†Ô∏è Aucune image trouv√©e (404) - Normal si pas d'images" -ForegroundColor Yellow
    } else {
        Write-Host "   ‚ùå Erreur lors de la r√©cup√©ration des images: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Test 4: Tester les URLs d'images individuelles
if ($images -and $images.Count -gt 0) {
    Write-Host "`nüß™ Test 4: URLs d'Images Individuelles" -ForegroundColor Yellow
    
    $firstImage = $images[0]
    $imageId = $firstImage.id
    
    # Test URL image compl√®te
    $imageUrl = "$baseUrl/api/visits/$visitId/images/$imageId"
    Write-Host "   üîó Test URL image compl√®te: $imageUrl" -ForegroundColor Cyan
    try {
        $response = Invoke-WebRequest -Uri $imageUrl -Method GET -TimeoutSec 10
        Write-Host "   ‚úÖ Image compl√®te accessible (Status: $($response.StatusCode), Taille: $($response.Content.Length) bytes)" -ForegroundColor Green
    } catch {
        Write-Host "   ‚ùå Image compl√®te non accessible: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    # Test URL thumbnail
    $thumbnailUrl = "$baseUrl/api/visits/$visitId/images/$imageId/thumbnail"
    Write-Host "   üîó Test URL thumbnail: $thumbnailUrl" -ForegroundColor Cyan
    try {
        $response = Invoke-WebRequest -Uri $thumbnailUrl -Method GET -TimeoutSec 10
        Write-Host "   ‚úÖ Thumbnail accessible (Status: $($response.StatusCode), Taille: $($response.Content.Length) bytes)" -ForegroundColor Green
    } catch {
        Write-Host "   ‚ùå Thumbnail non accessible: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Test 5: V√©rifier les headers CORS
Write-Host "`nüß™ Test 5: Headers CORS" -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$baseUrl/api/visits/$visitId/images" -Method OPTIONS -TimeoutSec 10
    $corsHeaders = @()
    if ($response.Headers['Access-Control-Allow-Origin']) { $corsHeaders += "Allow-Origin: $($response.Headers['Access-Control-Allow-Origin'])" }
    if ($response.Headers['Access-Control-Allow-Methods']) { $corsHeaders += "Allow-Methods: $($response.Headers['Access-Control-Allow-Methods'])" }
    if ($response.Headers['Access-Control-Allow-Headers']) { $corsHeaders += "Allow-Headers: $($response.Headers['Access-Control-Allow-Headers'])" }
    
    if ($corsHeaders.Count -gt 0) {
        Write-Host "   ‚úÖ Headers CORS d√©tect√©s:" -ForegroundColor Green
        $corsHeaders | ForEach-Object { Write-Host "      - $_" -ForegroundColor White }
    } else {
        Write-Host "   ‚ö†Ô∏è Aucun header CORS d√©tect√©" -ForegroundColor Yellow
        Write-Host "   üí° V√©rifiez la configuration CORS du backend" -ForegroundColor Cyan
    }
} catch {
    Write-Host "   ‚ùå Erreur lors du test CORS: $($_.Exception.Message)" -ForegroundColor Red
}

# R√©sum√© et recommandations
Write-Host "`nüìä R√©sum√© et Recommandations" -ForegroundColor Cyan
Write-Host "==============================" -ForegroundColor Cyan

Write-Host "`nüí° Actions recommand√©es:" -ForegroundColor Yellow
Write-Host "   1. V√©rifiez que le backend Spring Boot est d√©marr√©" -ForegroundColor White
Write-Host "   2. V√©rifiez que VisitImageController existe et fonctionne" -ForegroundColor White
Write-Host "   3. V√©rifiez que les images sont stock√©es physiquement sur le serveur" -ForegroundColor White
Write-Host "   4. V√©rifiez la configuration CORS dans le backend" -ForegroundColor White
Write-Host "   5. Testez les URLs d'images dans le navigateur" -ForegroundColor White

Write-Host "`nüîß URLs √† tester manuellement dans le navigateur:" -ForegroundColor Yellow
Write-Host "   - Visites: $baseUrl/api/visits" -ForegroundColor White
Write-Host "   - Images visite $visitId : $baseUrl/api/visits/$visitId/images" -ForegroundColor White
if ($images -and $images.Count -gt 0) {
    Write-Host "   - Image test: $baseUrl/api/visits/$visitId/images/$($images[0].id)" -ForegroundColor White
}

Write-Host "`n‚ú® Test termin√© !" -ForegroundColor Green
