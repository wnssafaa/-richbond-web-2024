╔═══════════════════════════════════════════════════════════════════════╗
║                    ✅ INSTRUCTIONS IMMÉDIATES                         ║
║                  Correction Erreurs 403 + Image Base64                ║
╚═══════════════════════════════════════════════════════════════════════╝

📢 DEUX PROBLÈMES RÉSOLUS :

1. ❌ Erreur 403 Forbidden lors de l'ajout de produit
   → ✅ Solution : Désactiver CSRF dans le backend

2. ❌ Erreur parsing JSON avec image base64
   → ✅ Solution : Upload image en multipart (✅ DÉJÀ FAIT côté frontend)


═══════════════════════════════════════════════════════════════════════
   ÉTAPE 1 : CORRIGER LE BACKEND (5 MINUTES)
═══════════════════════════════════════════════════════════════════════

1. Ouvrez IntelliJ IDEA

2. Ouvrez votre projet backend:
   C:\Users\lenovo i5\OneDrive\Bureau\testbackend\rechbonf-bakend-main\

3. Trouvez le fichier SecurityConfig.java:
   src/main/java/com/example/Richbondbakend/config/SecurityConfig.java

4. Ajoutez cette ligne dans la méthode securityFilterChain:
   
   .csrf(csrf -> csrf.disable())

   Exemple complet:
   ┌────────────────────────────────────────────────────────────┐
   │ @Bean                                                       │
   │ public SecurityFilterChain securityFilterChain(            │
   │         HttpSecurity http) throws Exception {              │
   │     http                                                    │
   │         .csrf(csrf -> csrf.disable()) // ← AJOUTER ICI    │
   │         .cors(...)                                          │
   │         .authorizeHttpRequests(...);                       │
   │     return http.build();                                    │
   │ }                                                           │
   └────────────────────────────────────────────────────────────┘

5. Si le fichier SecurityConfig.java N'EXISTE PAS:
   → Créez-le avec le code de BACKEND_EXAMPLES.md

6. Ajoutez @CrossOrigin sur ProduitController.java:
   
   @CrossOrigin(origins = "http://localhost:4200")
   public class ProduitController {
   
7. Sauvegardez les fichiers (Ctrl+S)

8. Redémarrez le backend:
   - Stop (carré rouge) 🛑
   - Attendez 2 secondes
   - Run (triangle vert) ▶️

9. Attendez le message:
   "Started RichbondbakendApplication in XX seconds"


═══════════════════════════════════════════════════════════════════════
   ÉTAPE 2 : TESTER (3 MINUTES)
═══════════════════════════════════════════════════════════════════════

1. Ouvrez TEST_403_ERROR.html dans votre navigateur
   (Double-cliquez sur le fichier)

2. Connectez-vous d'abord à http://localhost:4200

3. Revenez sur TEST_403_ERROR.html

4. Cliquez sur "Vérifier Token" → Doit être ✅

5. Cliquez sur "Tester Ajout (avec token)" → Doit être ✅ Status 201


═══════════════════════════════════════════════════════════════════════
   ÉTAPE 3 : AJOUTER UN PRODUIT AVEC IMAGE (2 MINUTES)
═══════════════════════════════════════════════════════════════════════

1. Ouvrez http://localhost:4200

2. Cliquez sur "Produits"

3. Cliquez sur "Ajouter Produit"

4. Remplissez le formulaire (tous les champs avec *)

5. Cliquez sur "Choisir une image" et sélectionnez une image

6. Cliquez sur "Enregistrer"

7. Résultat attendu:
   ✅ "Produit et image ajoutés avec succès"


═══════════════════════════════════════════════════════════════════════
   VÉRIFICATIONS CONSOLE
═══════════════════════════════════════════════════════════════════════

Ouvrez la console du navigateur (F12) :

✅ Vous devez voir:
   "✅ Produit créé avec succès: {id: 54, ...}"
   "📤 Upload de l'image pour le produit: 54"
   "✅ Image uploadée avec succès: {id: 8, ...}"

❌ Vous NE devez PAS voir:
   "403 Forbidden"
   "Cannot construct instance of ProduitImage"
   "JSON parse error"


═══════════════════════════════════════════════════════════════════════
   SI ÇA NE FONCTIONNE PAS
═══════════════════════════════════════════════════════════════════════

Problème 1: Toujours erreur 403
→ Lisez: FIX_403_QUICK_START.md
→ Vérifiez que CSRF est bien désactivé dans les logs backend

Problème 2: Erreur parsing JSON
→ Lisez: SOLUTION_IMAGE_MULTIPART.md
→ Vérifiez que l'image base64 n'est PAS dans le JSON (onglet Network)

Problème 3: Image ne s'uploade pas
→ Vérifiez que l'endpoint POST /{id}/images existe dans le backend
→ Vérifiez les logs backend


═══════════════════════════════════════════════════════════════════════
   RÉSUMÉ DES FICHIERS D'AIDE
═══════════════════════════════════════════════════════════════════════

📖 Guides:
   ✅ RESUME_COMPLET_SOLUTIONS.md      ← Vue d'ensemble COMPLÈTE
   ✅ README_FIX_403.md                 ← Guide principal
   ✅ FIX_403_QUICK_START.md            ← Solution rapide 403
   ✅ SOLUTION_IMAGE_MULTIPART.md       ← Upload multipart
   ✅ FIX_IMAGE_BASE64_RESUME.txt       ← Résumé image
   ✅ BACKEND_FIX_403_ERROR.md          ← Solutions 403 détaillées
   ✅ BACKEND_EXAMPLES.md               ← Code backend
   ✅ DIAGNOSTIC_403_VISUAL.md          ← Diagrammes

🧪 Outils de test:
   ✅ TEST_403_ERROR.html               ← Test navigateur
   ✅ test-403-error.ps1                ← Test PowerShell
   ✅ test-403-error.bat                ← Test batch
   ✅ Richbond_API_Tests.postman_collection.json


═══════════════════════════════════════════════════════════════════════
   ORDRE DE LECTURE RECOMMANDÉ
═══════════════════════════════════════════════════════════════════════

1. RESUME_COMPLET_SOLUTIONS.md       ← Lisez d'abord ceci
2. FIX_403_QUICK_START.md            ← Puis la solution 403
3. BACKEND_EXAMPLES.md               ← Copiez le code backend
4. TEST_403_ERROR.html               ← Testez avec cet outil


═══════════════════════════════════════════════════════════════════════
   CONTACT / QUESTIONS
═══════════════════════════════════════════════════════════════════════

Si après avoir suivi TOUTES les étapes, le problème persiste:

1. Vérifiez que vous avez bien:
   ✅ Désactivé CSRF
   ✅ Ajouté @CrossOrigin
   ✅ Redémarré le backend
   ✅ Token JWT valide

2. Collectez ces informations:
   - Logs backend complets
   - Résultat de TEST_403_ERROR.html
   - Console du navigateur (F12)
   - Network tab (requêtes HTTP)

3. Consultez les guides détaillés dans l'ordre ci-dessus


═══════════════════════════════════════════════════════════════════════

✨ BONNE CHANCE ! Votre application sera fonctionnelle dans 10-15 minutes !

═══════════════════════════════════════════════════════════════════════

